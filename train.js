let trainingData = JSON.parse(localStorage.getItem("trainingData")) || []; // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ

console.log("üìö ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•...");
    const startTime = performance.now();

    if (trainingData.length < 1) {
        trainStatus.innerText = "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡∏£‡∏ô!";
        return;
    }

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    let xs = trainingData.map(data => textToNumbers(data.input, 10));
    let ys = trainingData.map(data => textToNumbers(data.output, 10));

    xs = tf.tensor2d(xs);
    ys = tf.tensor2d(ys);

    const epochs = 10; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô
    const estimatedTimePerEpoch = 1; // ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 1 ‡∏ß‡∏¥ ‡∏ï‡πà‡∏≠ 1 epoch (‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå)
    let remainingTime = epochs * estimatedTimePerEpoch;

    // ‡∏ï‡∏±‡πâ‡∏á Interval ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á
    const countdown = setInterval(() => {
        trainStatus.innerText = `‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏£‡∏ô AI... ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${remainingTime} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`;
        remainingTime--;
        if (remainingTime <= 0) clearInterval(countdown);
    }, 1000);

    await model.fit(xs, ys, { epochs });

    clearInterval(countdown); // ‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á
    const endTime = performance.now();
    const trainTime = ((endTime - startTime) / 1000).toFixed(2);

    console.log(`‚úÖ ‡πÄ‡∏ó‡∏£‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ ${trainTime} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`);
    trainStatus.innerText = `‚úÖ ‡πÄ‡∏ó‡∏£‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ ${trainTime} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`;


async function trainBot() {
    const trainStatus = document.getElementById("train-status");
    trainStatus.innerText = "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏£‡∏ô AI... ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${remainingTime} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ";

    await saveModel();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
function textToNumbers(text, length) {
    let numbers = text.split('').map(char => char.charCodeAt(0) % 100);
    while (numbers.length < length) numbers.push(0); // ‡πÄ‡∏ï‡∏¥‡∏° 0 ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß
    return numbers.slice(0, length);
}